#include "services_dune.fcl"
#include "imagepatternalgs.fcl"

# Example configuration of job file dumping ADC to text files for
# further processing of trainning/testinng sets for CNN. Dumped
# data contains "images" of ADC downscaled in drift direction,
# accompanied with images of PDG codes and vertex information,
# Configured for ProtoDUNE, hopefully straight-forward to adopt
# to other experiments.

process_name: DataDump

services:
{
  TFileService: { fileName: "nusonic_reco_hist.root" }
  MemoryTracker:     {}
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
			            @table::protodune_simulation_services
}

services.NuRandomService.policy: "perEvent"

source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

physics:
{
 analyzers:
 {
  # module making ADC + MC-truth data dumps
  datadump: @local::standard_pointidtrainingdata
 }

 anadata: [ datadump ]

 trigger_paths: [ ]
 end_paths:     [ anadata ]
}

# Data preparation settings:
#
physics.analyzers.datadump.TrainingDataAlg.WireLabel: "wclsdatasp:gauss"
physics.analyzers.datadump.TrainingDataAlg.SimulationLabel: "largeant"
physics.analyzers.datadump.TrainingDataAlg.SimChannelLabel: "tpcrawdecoder:simpleSC"
physics.analyzers.datadump.TrainingDataAlg.SaveVtxFlags:    false         # save (or not) interaction and decay vertex info
physics.analyzers.datadump.TrainingDataAlg.DriftWindow:     6            # downsampling window in drift ticks
physics.analyzers.datadump.TrainingDataAlg.AdcDelayTicks:   0            # delay of ADC peak in drift ticks
physics.analyzers.datadump.TrainingDataAlg.DownscaleFn:     "mean"       # downsampling function
physics.analyzers.datadump.TrainingDataAlg.AdcMax:          30
physics.analyzers.datadump.TrainingDataAlg.AdcMin:          0
physics.analyzers.datadump.TrainingDataAlg.OutMax:          1
physics.analyzers.datadump.TrainingDataAlg.OutMin:          0
# Input TPC / plane selection:
#
physics.analyzers.datadump.SelectedTPC:     [1, 2, 5, 6, 9, 10]                          # all TPC's if empty list, or save data from selected TPC's only
physics.analyzers.datadump.SelectedView:    [2]                          # all views if empty list, or save data from selected views only

# Output format and location:
#
physics.analyzers.datadump.OutTextFilePath: "/exp/dune/data/users/amogan/cnn_event_dumps"   # output directory for data dump
physics.analyzers.datadump.Crop:            false                        # set to false when dumping noise (empty) events
physics.analyzers.datadump.DumpToRoot:      false                        # all events data is saved to a single ROOT file (otherwise text
                                                                         # files for each PDG/ADC/deposit map are produced), both formats
                                                                         # can be parsed by the patch making Python scripts
physics.analyzers.datadump.OutNumpyFileName: "output"
physics.analyzers.datadump.DumpToNumpy: true
physics.analyzers.datadump.Patch_size_w: 48
physics.analyzers.datadump.Patch_size_d: 48
physics.analyzers.datadump.Em: 0.003
physics.analyzers.datadump.Trk: 0.005
physics.analyzers.datadump.Michel: 0.3
physics.analyzers.datadump.None: 0.000015
physics.analyzers.datadump.StopTrk: 0.1
physics.analyzers.datadump.CleanTrk: 0.8
### No longer supported?
#physics.analyzers.datadump.ScalePriEl: 100
#physics.analyzers.datadump.ScalePriMu: 1

# Calibration:
#
#physics.analyzers.datadump.TrainingDataAlg.CalorimetryAlg:  @local::standard_calorimetryalgmc # use your detector calibration constants, this is the default
physics.analyzers.datadump.TrainingDataAlg.CalibrateAmpl:   false                               # this equalizes ADC amplitudes between planes and MC/data
physics.analyzers.datadump.TrainingDataAlg.CalibrateLifetime: false
# Noise and distortions testing (off by default):
#
#physics.analyzers.datadump.TrainingDataAlg.BlurKernel:      [0.03, 0.15, 0.64, 0.15, 0.03] # wire to wire blur
#physics.analyzers.datadump.TrainingDataAlg.NoiseSigma:      4                              # uncorrelated noise
#physics.analyzers.datadump.TrainingDataAlg.CoherentSigma:   6                              # coherent noise, over 32 wire groups

